@page "/difficulty/{id:int}"
@page "/difficulty"

@using BlazorPlayGround.Client.Services.DifficultyService
@inject HttpClient Http
@inject IClientDifficultyService clientDifficultyService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@if (id is null)
{
    <PageTitle>New Team</PageTitle>
    <h2>Create a New Difficulty</h2>
}
else
{
    <PageTitle>Edit @difficulty.Title</PageTitle>
    <h2>Edit @difficulty.Title</h2>
}

<EditForm Model="difficulty" OnValidSubmit="HandleSubmit">

    @if(id is null)
    {   
        <DataAnnotationsValidator />
    }

    <MudCard>
        <MudCardContent>
            <MudTextField Label="Name" @bind-Value="@difficulty.Title"
                          For="@(() => difficulty.Title)"></MudTextField>
        </MudCardContent>
    </MudCard>
    <br />

    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Class="mr-2">@(isNew ? "Create Difficulty" : "Update Difficulty")</MudButton>
    @if(!isNew)
    {
    <MudButton ButtonType="ButtonType.Button"
               OnClick="() => DeleteDifficulty(difficulty.Id)"
               Color="Color.Error"
               Variant="Variant.Filled">
        Delete Difficulty
    </MudButton>
    }
</EditForm>

@code {
    [Parameter]
    public int? id { get; set; }

    string btnText = string.Empty;

    bool isNew = true;


    public Difficulty difficulty = new Difficulty();

    protected override void OnInitialized()
    {
        btnText = id == null ? "Save New Difficulty" : "Update Difficulty";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (id is not null)
        {
            var result = await clientDifficultyService.GetSingleDifficulty((int)id);
            if (result != null)
            {
                difficulty = result;
                isNew = false;
            }
            else
            {
                NavigationManager.NavigateTo("/difficulties");
            }
        }
    }

    async Task HandleSubmit()
    {
        if (id is null)
        {
            await clientDifficultyService.AddDifficulty(difficulty);
            Snackbar.Add(

            "Added Difficulty Successfully",

            Severity.Success,

            config =>

            {

                config.ShowTransitionDuration = 200;

                config.HideTransitionDuration = 400;

                config.VisibleStateDuration = 2500;

            });
        }
        else
        {
            await clientDifficultyService.UpdateDifficulty((int)id, difficulty);
            Snackbar.Add(
                "Update Difficulty Successfully",
                Severity.Success,
            config =>
            {
                config.ShowTransitionDuration = 200;
                config.HideTransitionDuration = 400;
                config.VisibleStateDuration = 2500;
            });
        }
    }

    async void DeleteDifficulty(int id)
    {
        await clientDifficultyService.DeleteDifficulty(id);
        StateHasChanged();
        Snackbar.Add(
                "Deleted Difficulty Successfully",
                Severity.Success,
            config =>
            {
                config.ShowTransitionDuration = 200;
                config.HideTransitionDuration = 400;
                config.VisibleStateDuration = 2500;
            });
    }

}