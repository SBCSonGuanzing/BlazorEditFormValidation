@page "/difficulties"

@using BlazorPlayGround.Client.Services.TeamService
@inject HttpClient Http
@inject IClientDifficultyService clientDifficultyService
@inject NavigationManager NavigationManager

<PageTitle>Difficulties</PageTitle>

<h3>Difficulties</h3>
<MudTable Items="clientDifficultyService.difficulties" Hover="true" Striped="true" Dense="true" Class="mb-2">
    <HeaderContent>
        <MudTh>Difficulties</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>

        <MudTd DataLabel="Title">
            @context.Title
        </MudTd>

        <MudTd>
            <MudIconButton OnClick="() => editDifficulty(context.Id)"
                           Icon="@Icons.Material.Filled.Edit"
                           Color="Color.Primary"
                           Variant="Variant.Filled"></MudIconButton>
            <MudIconButton OnClick="() => deleteDifficulty(context.Id)"
                           Icon="@Icons.Material.Filled.Delete"
                           Color="Color.Error"
                           Variant="Variant.Filled">
            </MudIconButton>
        </MudTd>

    </RowTemplate>
</MudTable>


<MudIconButton OnClick="createDifficulty"
               Color="Color.Primary"
               Variant="Variant.Filled">Create New Difficulty</MudIconButton>
<p style="height:500px;"></p>

@code {

    List<Difficulty> difficulties = new List<Difficulty>();

    Difficulty difficulty = new Difficulty();

    protected override async Task OnInitializedAsync()
    {
        difficulties = await clientDifficultyService.GetAllDifficulty();
    }

    // Delete Team
    async void deleteDifficulty(int id)
    {
        await clientDifficultyService.DeleteDifficulty(id);
        StateHasChanged();
    }

    void createDifficulty() => NavigationManager.NavigateTo($"/difficulty");

    void editDifficulty(int id) => NavigationManager.NavigateTo($"/difficulty/{id}");

}
