@page "/difficulties"

@using BlazorPlayGround.Client.Services.TeamService
@inject HttpClient Http
@inject IClientDifficultyService clientDifficultyService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Difficulties</PageTitle>
<h1>Difficulties</h1>

<MudTable Items="clientDifficultyService.difficulties" Hover="true" Striped="true" Dense="true" Class="mb-2">
    <HeaderContent>
        <MudTh>Difficulties</MudTh>
        <AuthorizeView Roles="Admin">
            <Authorized>
                <MudTh>Action</MudTh>
            </Authorized>
        </AuthorizeView>
    </HeaderContent>
    <RowTemplate Context="difficulties">
        <MudTd DataLabel="Title">
            @difficulties.Title
        </MudTd>
        <AuthorizeView Roles="Admin">
            <Authorized>
                <MudTd>
                    <MudIconButton OnClick="() => editDifficulty(difficulties.Id)"
                                   Icon="@Icons.Material.Filled.Edit"
                                   Color="Color.Primary"
                                   Variant="Variant.Filled"></MudIconButton>
                    <MudIconButton OnClick="() => deleteDifficulty(difficulties.Id)"
                                   Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   Variant="Variant.Filled">
                    </MudIconButton>
                </MudTd>
            </Authorized>
        </AuthorizeView>
    </RowTemplate>
</MudTable>

<AuthorizeView Roles="Admin">
    <Authorized>
        <MudIconButton OnClick="createDifficulty"
                   Color="Color.Primary"
                   Variant="Variant.Filled">Create New Difficulty
        </MudIconButton>
    </Authorized>
</AuthorizeView>

<p style="height:500px;"></p>

@code {

    List<Difficulty> difficulties = new List<Difficulty>();

    Difficulty difficulty = new Difficulty();

    protected override async Task OnInitializedAsync()
    {
        difficulties = await clientDifficultyService.GetAllDifficulty();
    }

    // Delete Team
    async void deleteDifficulty(int id)
    {
        await clientDifficultyService.DeleteDifficulty(id);
        StateHasChanged();
        Snackbar.Add(

            "Deleted Difficulty Successfully",

            Severity.Success,

            config =>

            {

                config.ShowTransitionDuration = 200;

                config.HideTransitionDuration = 400;

                config.VisibleStateDuration = 2500;

            });
    }

    void createDifficulty() => NavigationManager.NavigateTo($"/difficulty");

    void editDifficulty(int id) => NavigationManager.NavigateTo($"/difficulty/{id}");

}
