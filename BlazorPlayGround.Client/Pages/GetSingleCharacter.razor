@page "/character/{id:int}"
@page "/character"

@using BlazorPlayGround.Client.Services

@inject HttpClient Http
@inject IClientCharacterService clientCharacterService
@inject IClientTeamService clientTeamService
@inject IClientDifficultyService clientDifficultyService   
@inject NavigationManager NavigationManager

<h3>Teams</h3>

@if (id is null)
{
    <PageTitle>New Character</PageTitle>
    <h2>Create a New Character</h2>
}
else
{
    <PageTitle>Edit @character.Name</PageTitle>
    <h2>Edit @character.Name</h2>
}


<EditForm Model="character" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Name" @bind-Value="@character.Name"
                For="@(() => character.Name)"
            >
            </MudTextField>
            <MudTextField Label="Bio" @bind-Value="character.Bio"
                For="@(() => character.Bio)"
            >
            </MudTextField>
            <MudSelect Label="Teams" @bind-Value="character.TeamId">
                @foreach (var team in clientTeamService.teams)
                {
                    <MudSelectItem Value="@team.Id">
                        @team.Name
                    </MudSelectItem>
                }
            </MudSelect>
             <MudSelect Label="Difficulty" @bind-Value="character.DifficultyId">
                @foreach (var difficulties in clientDifficultyService.difficulties)
                {
                    <MudSelectItem Value="@difficulties.Id">
                        @difficulties.Title
                    </MudSelectItem>
                }
            </MudSelect>
           
            <MudImage Src="@character.Image" Elevation="25" Class="rounded my-2"></MudImage>
            <br />
            <InputFile id="fileInput" OnChange="OnFileChange" hidden/>
            <MudButton
                HtmlTag="label"    
                Variant="Variant.Filled"
                Color="Color.Primary"
                StartIcon="@Icons.Material.Filled.CloudUpload"
                for="fileInput"
            >
                Upload Image
            </MudButton>
            <br/>
            <MudSwitch @bind-Checked="@character.isReadyToFight" Color="Color.Primary" Label="Ready to Fight?"/>

        </MudCardContent>
    </MudCard>
    <br />


    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">@(isNew ? "Create Character" : "Update Character")</MudButton>

    @if(!isNew) {
    <MudButton ButtonType="ButtonType.Button"
        OnClick="() => DeleteCharacter(character.Id)"
                   Color="Color.Error"
                   Variant="Variant.Filled"> Delete Character
    </MudButton>
    }
</EditForm>

<p style="height:500px;"></p>

@code {

  

    [Parameter]
    public int? id { get; set; }

    string btnText = string.Empty;

    bool isNew = true;

    public Character character = new Character();

    protected override async Task OnInitializedAsync()
    {
        btnText = id == null ? "Save New Character" : "Update Character";
        await clientTeamService.GetAllTeam();
        await clientDifficultyService.GetAllDifficulty();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (id != null)
        {
            var result = await clientCharacterService.GetSingleCharacter((int)id);
            if (result != null)
            {
                character = result;
                isNew = false;
            }
            else
            {
                NavigationManager.NavigateTo("/characters");
            }
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 200, 200);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format}; base64, {Convert.ToBase64String(buffer)}";
        character.Image = imageData;
    }

    private async Task HandleSubmit()
    {
        if (id is null)
        {
            await clientCharacterService.AddCharacter(character);
        }
        else
        {
            await clientCharacterService.UpdateCharacter(character);
        }
    }

    async void DeleteCharacter(int id)
    {
        await clientCharacterService.DeleteCharacter(id);
        StateHasChanged();
    }

}