@page "/team/{id:int}"
@page "/team"

@using BlazorPlayGround.Client.Services.TeamService
@inject HttpClient Http
@inject IClientTeamService clientTeamService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@if (id is null)
{
    <PageTitle>New Team</PageTitle>
    <h2>Create a New Team</h2>
}
else
{
    <PageTitle>Edit @team.Name</PageTitle>
    <h2>Edit @team.Name</h2>
}

<EditForm Model="team" OnValidSubmit="HandleSubmit">
    @if(id is null)
    {
        <DataAnnotationsValidator />
    }
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Team" @bind-Value="@team.Name"
                          For="@(() => team.Name)">
            </MudTextField>
        </MudCardContent>
    </MudCard>

    <br />

    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Class="mr-2">@(isNew ? "Create Team" : "Update Team")</MudButton>
    @if(!isNew)
    {
        
    <MudButton ButtonType="ButtonType.Button"
               OnClick="() => DeleteTeam(team.Id)"
               Color="Color.Error"
               Variant="Variant.Filled">
        Delete Team
    </MudButton>
    }

</EditForm>


@code {
    [Parameter]
    public int? id { get; set; }

    bool isNew = true;

    string btnText = string.Empty;

    public Team team = new Team();

    protected override void OnInitialized()
    {
        btnText = id == null ? "Save New Team" : "Update Team";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (id is not null)
        {
            var result = await clientTeamService.GetSingleTeam((int)id);
            if (result != null)
            {
                team = result;
                isNew = false;
            }
            else
            {
                NavigationManager.NavigateTo("/team");
            }
        }
    }

    async Task HandleSubmit()
    {
        if (id is null)
        {
            await clientTeamService.AddTeam(team);
            Snackbar.Add(

            "Added Team Successfully",

            Severity.Success,

            config =>

            {

                config.ShowTransitionDuration = 200;

                config.HideTransitionDuration = 400;

                config.VisibleStateDuration = 2500;

            });
        }
        else
        {
            await clientTeamService.UpdateTeam((int)id, team);
            Snackbar.Add(

            "Updated Team Successfully",

            Severity.Success,

            config =>

            {

                config.ShowTransitionDuration = 200;

                config.HideTransitionDuration = 400;

                config.VisibleStateDuration = 2500;

            });
        }
    }

    async void DeleteTeam(int id)
    {
        await clientTeamService.DeleteTeam(id);
        StateHasChanged();
        Snackbar.Add(

            "Deleted Team Successfully",

            Severity.Success,

            config =>

            {

                config.ShowTransitionDuration = 200;

                config.HideTransitionDuration = 400;

                config.VisibleStateDuration = 2500;

            });
    }
}