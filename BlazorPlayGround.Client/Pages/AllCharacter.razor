@page "/characters"

@using BlazorPlayGround.Client.Services.CharacterServices

@inject HttpClient Http
@inject IClientCharacterService clientCharacterService
@inject IClientTeamService clientTeamService
@inject IClientDifficultyService clientDifficultyService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Characters</PageTitle>
<h1>Characters</h1>

<MudTable Items="clientCharacterService.characters" Hover="true" Striped="true" Dense="true" Class="mb-2">
    <HeaderContent>
        <MudTh>Image</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Bio</MudTh>
        <MudTh>BirthDate</MudTh>
        <MudTh>Team</MudTh>
        <MudTh>Difficulty</MudTh>
        <MudTh>IsReadyToFight</MudTh>
        <AuthorizeView Roles="Admin">
            <Authorized>
                <MudTh>Action</MudTh>
            </Authorized>
        </AuthorizeView>
    </HeaderContent>
    <RowTemplate Context="character">
        <MudTd DataLabel="Image"><MudAvatar Image="@character.Image"></MudAvatar></MudTd>
        <MudTd DataLabel="Name">@character.Name</MudTd>
            <MudTd DataLabel="Bio">@character.Bio</MudTd>
            <MudTd DataLabel="BirthDate">@character.BirthDate</MudTd>
            @if (character.Team != null)
            {
            <MudTd DataLabel="Team">@character.Team.Name</MudTd>
            }
            else
            {
                <MudTd DataLabel="NoResult">No Results Found</MudTd>
            }
        @if (character.Difficulty != null)
            {
            <MudTd DataLabel="Title">@character.Difficulty.Title</MudTd>
            }
            else
            {
                <MudTd>No Results Found</MudTd>
            }
        <MudTd DataLabel="isReadyToFight">@character.isReadyToFight</MudTd>
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <MudTd>
                        <MudIconButton OnClick="() => EditCharacter(character.Id)"
                            Icon="@Icons.Material.Filled.Edit"
                            Color="Color.Primary"
                            Variant="Variant.Filled"
                        ></MudIconButton>
                        <MudIconButton OnClick="() => DeleteCharacter(character.Id)"
                                       Icon="@Icons.Material.Filled.Delete"
                            Color="Color.Error"
                            Variant="Variant.Filled">
                        </MudIconButton>
                    </MudTd>
                </Authorized>
            </AuthorizeView>
        </RowTemplate>
    </MudTable>

    <AuthorizeView Roles="Admin">
        <Authorized>
            <MudIconButton OnClick="CreateCharacter"
                           Color="Color.Primary"
                           Variant="Variant.Filled">Create New Character
            </MudIconButton>
        </Authorized>
    </AuthorizeView>

<p style="height:500px;"></p>

    @code {

    List<Character> characters = new List<Character>();

    Character character = new Character();

    protected override async Task OnInitializedAsync()
    {
        await clientCharacterService.GetAllCharacters();
    }

    void CreateCharacter() => NavigationManager.NavigateTo($"/character");
    void EditCharacter(int id)
    {
        NavigationManager.NavigateTo($"/character/{id}");

    }
    async void DeleteCharacter(int id)
    {
        await clientCharacterService.DeleteCharacter(id);
        StateHasChanged();

        Snackbar.Add(

            "Deleted Character Successfully",

            Severity.Success,

            config =>

            {

                config.ShowTransitionDuration = 200;

                config.HideTransitionDuration = 400;

                config.VisibleStateDuration = 2500;

            });
    }

    private void HandleSubmit()
    {      
        characters.Add(character);
    }

    
}